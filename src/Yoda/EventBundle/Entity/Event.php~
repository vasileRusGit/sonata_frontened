<?php

namespace Yoda\EventBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * Event
 *
 * @ORM\HasLifecycleCallbacks
 * @ORM\Table(name="event")
 * @ORM\Entity(repositoryClass="Yoda\EventBundle\Repository\EventRepository")
 */
class Event
{

    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="mark", type="string", length=255)
     */
    private $mark;

    /**
     * @var string
     *
     * @ORM\Column(name="type", type="string", length=255)
     */
    private $type;

    /**
     * @var string
     *
     * @ORM\Column(name="details", type="string", length=255)
     */
    private $details;

    //////////////////////////////////////
    /**
     * @Assert\File(maxSize="6000000")
     */
    private $files;

    /**
     *
     * @ORM\Column(name="cover", type="string")
     */
    private $cover;


    /**
     * @param string $cover
     */
    public function setCover($cover)
    {
        $this->cover = $cover;
    }

    /**
     * Get Cover
     * @return string
     */
    public function getCover()
    {
        return $this->cover;
    }

    /**
     * Sets Files
     * @param UploadedFile $files
     */
    public function setFiles(UploadedFile $files = null)
    {
        $this->files = $files;
    }

    /**
     * Get file.
     *
     * @return UploadedFile
     */
    public function getFiles()
    {
        return $this->files;
    }


    /**
     * Get web path to upload directory
     *
     * @return string
     */
    protected function getUploadPath()
    {
        return 'uploads/covers';
    }

    /**
     * Get absolute path to upload directory
     *
     * @return string
     */
    protected function getUploadAbsolutePath()
    {
        return __DIR__ . '/../../../../web/' . $this->getUploadPath();
    }

    /**
     * Get path to a cover
     *
     * @return null|string
     */
    public function getCoverWeb()
    {
        return NULL === $this->getCover() ? NULL : $this->getUploadPath() . '/' . $this->getCover();
    }

    /**
     * Get path on disk to a cover
     *
     * @return null|string
     */
    public function getCoverAbsolute()
    {
        return NULL === $this->getCover() ? NULL : $this->getUploadAbsolutePath() . '/' . $this->getCover();
    }

    /**
     * Upload a cover File
     */
    public function upload()
    {
        if (null === $this->getFiles()) {
            return;
        }

        $filename = $this->getFiles()->getClientOriginalName();

        // move the uploaded file to target directory using original name
        $this->getFiles()->move($this->getUploadAbsolutePath(), $filename);

        // set the cover
        $this->setCover($filename);

        // cleanup
        $this->setFiles();
        return 'Done';
    }
    //////////////////////////////////////

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Event
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set details
     *
     * @param string $details
     * @return Event
     */
    public function setDetails($details)
    {
        $this->details = $details;

        return $this;
    }

    /**
     * Get details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->details;
    }

    /**
     * @return string
     */
    public function getMark()
    {
        return $this->mark;
    }

    /**
     * @param string $mark
     */
    public function setMark($mark)
    {
        $this->mark = $mark;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * @param string $type
     */
    public function setType($type)
    {
        $this->type = $type;
    }

}
